[{"/home/student/THE-DICES-GAME/app/src/index.js":"1","/home/student/THE-DICES-GAME/app/src/reportWebVitals.js":"2","/home/student/THE-DICES-GAME/app/src/ui/App.js":"3","/home/student/THE-DICES-GAME/app/src/ui/game.js":"4","/home/student/THE-DICES-GAME/app/src/ui/prime.js":"5","/home/student/THE-DICES-GAME/app/src/ui/table.js":"6","/home/student/THE-DICES-GAME/app/src/ui/Chat.js":"7","/home/student/THE-DICES-GAME/app/src/ui/gamelobby.js":"8","/home/student/THE-DICES-GAME/app/src/ui/jsonwzor.js":"9"},{"size":504,"mtime":1610889338362,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610889338362,"results":"12","hashOfConfig":"11"},{"size":551,"mtime":1610889338362,"results":"13","hashOfConfig":"11"},{"size":7289,"mtime":1611422198131,"results":"14","hashOfConfig":"11"},{"size":1953,"mtime":1611398658106,"results":"15","hashOfConfig":"11"},{"size":7766,"mtime":1611312504342,"results":"16","hashOfConfig":"11"},{"size":2646,"mtime":1611402595641,"results":"17","hashOfConfig":"11"},{"size":2174,"mtime":1610889338362,"results":"18","hashOfConfig":"11"},{"size":645,"mtime":1610889338362,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"677lqx",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/home/student/THE-DICES-GAME/app/src/index.js",[],["45","46"],"/home/student/THE-DICES-GAME/app/src/reportWebVitals.js",[],"/home/student/THE-DICES-GAME/app/src/ui/App.js",["47","48"],"import React, { useState, Fragment, useEffect } from 'react';\nimport Game from './game'\nimport Prime from './prime'\nimport './styles.css'\n\n\n\n\n\nfunction App() {\n  const [gameStarted, toggleGameStarted] = useState(false)\n  const [identity, setIdentity] = useState({player: 0, id:''})\n\n\n\n  return (\n    <div className='Main'>\n      {gameStarted ?\n      (<Game \n        identity={identity}\n\n      />)\n      : \n      (<Prime\n        toggleGameStarted={toggleGameStarted} \n        setIdentity={setIdentity}\n      />)}\n    </div>\n  );\n}\n\nexport default App;\n","/home/student/THE-DICES-GAME/app/src/ui/game.js",["49","50","51","52","53","54","55","56","57","58"],"import React, { useState,  useEffect } from 'react';\nimport dice1 from '../materials/dice1.png'\nimport dice2 from '../materials/dice2.png'\nimport dice3 from '../materials/dice3.png'\nimport dice4 from '../materials/dice4.png'\nimport dice5 from '../materials/dice5.png'\nimport dice6 from '../materials/dice6.png'\nimport {v4 as uuidv4} from 'uuid'\nimport FastRewindIcon from '@material-ui/icons/FastRewind';\nimport {Button,TextField} from '@material-ui/core'\nimport BasicTable from './table'\nimport Chat from './Chat'\nimport Axios from 'axios'\nimport Gamelobby from './gamelobby'\n\n\nconst wzor = require('./jsonwzor')\nconst jsonik = wzor.jsonik;\nconst player_state = wzor.player_state;\nconst mqtt = require('mqtt');\nconst client = mqtt.connect('mqtt://10.45.3.52:8000/mqtt');\n\n\n\nfunction Game({identity}) {\n    const [gameState, setGameState] = useState({ started: false, state: [], dices_state:[]});\n    const [chatState, setChatState] = useState([]);\n    const [clicked, setClicked] = useState([]);\n    \n    useEffect(() => {\n        client.on('connect', () => {\n        console.log('connected to broker');\n    })\n    client.subscribe(`game/${identity[0]}`);\n    client.subscribe(`game/${identity[0]}/chat`);\n    client.subscribe(`game/${identity[0]}/chat/${identity[1]}`);\n    client.publish(`game/${identity[0]}/chat`, JSON.stringify({player: identity[1], message: 'CONNECTED', target: 'All', priv: false}));\n    \n    client.on('message', function (topic, message) {\n        if (topic === `game/${identity[0]}`) {\n            let resp = JSON.parse(message.toString());\n                setGameState(resp);   \n            } else {\n                setChatState(chatState => [...chatState,JSON.parse(message.toString())]);\n            }\n        }\n        );\n    },[])\n\n    async function send_game_state_when_rerolled() {\n        let ns = gameState;\n        ns.clicked_dices = clicked;\n        ns.activity = 4;\n        try {\n            await Axios({\n            method: \"post\",\n            url: `/game`,\n            data: ns\n          });\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n\n    async function send_game_state_when_chosen() {\n        try {\n            await Axios({\n            method: \"post\",\n            url: `/game}`,\n            data: {...gameState, activity: 5}\n        });\n        } catch (error) {\n        console.error(error);\n        }\n    }\n    \n    \n\n\n    const isMove = () => {\n        return (identity[1] === gameState.move) ? true : false;\n    }\n\n    const dices = {\n        1: dice1,\n        2: dice2,\n        3: dice3,\n        4: dice4,\n        5: dice5,\n        6: dice6\n    }\n    \n    \n\n    const reroll = () => {\n        if (gameState.rerolls < 3) {\n        send_game_state_when_rerolled();\n        }\n    }\n\n    const generateBorderWhenClicked = (ids,dice) => {\n        if (identity[1] === gameState.move) {\n            dice.clicked = !dice.clicked;\n            if (document.getElementById(ids).style.border === 'none') {\n                document.getElementById(ids).style.border = 'black solid 2px';\n            } else {\n                document.getElementById(ids).style.border = 'none';\n            }\n        }\n    }\n\n    const sendMessage = async (mess, target) => {\n        document.getElementById('chatinput').value=\"\";\n\tif (mess !== \"\") {\n\t(mess.length > 35) ? mess = mess.slice(0,35) : mess = mess\n\tlet priv;\n\tif (chatState.length > 8) {\n\t\tsetChatState(chatState.slice(-7))\n\t}\n\tif ( target === \"\" || target === \"All\"  ) {\n\t\tpriv = false;\n\t} else if (target === identity[1]) {\n\t\tpriv = true;\n\t}\n\t else {\n\t\tpriv = true;\n\t\tsetChatState([...chatState, {priv: true, player: identity[1], message: mess, target: target}])\n\t}\n        try {\n            await Axios({\n            method: \"post\",\n            url: `/chat`,\n            data: {priv: priv,id: identity[0], player: identity[1], message: mess, target: target}\n        });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n}\n\tconst nextMove = (mm) => {\n\t\tif (mm === gameState.state.length) {\n\t\t\treturn 1\n\t\t} else return mm+1\n}\n\n\n    return (\n        <div> \n            {gameState.winner ? (<div style={{textAlign:'center'}}> <h1>WINNER IS PLAYER {gameState.winner}</h1></div>) \n            : <div>{gameState.started ?\n                    <div className=\"game\">\n                        <div className='display'>\n                            <div className='top'>\n                                <Chat state={gameState.state} chatState={chatState} identity={identity} sendMessage={sendMessage}/>\n                                <div className='rolltable'>\n                                    <div style={{marginTop:'180px', height:'50px'}}>\n                                    {gameState.dices_state.map(dice => {\n                                            let ids=uuidv4()\n                                        return (\n                                            <img key={ids} id={ids} style={(dice.clicked==true)? {border: 'black solid 2px'} : {border: 'none'}} className='dice' onClick={() => { generateBorderWhenClicked(ids,dice)}} src={dices[dice.value]}/>\n                                        )})}\n                                    </div>\n                                    <div style={{marginTop:'30px'}}>\n                                    {(gameState.move === identity[1])\n                                        ?\n                                        <Button onClick={reroll} variant=\"contained\" color=\"secondary\">{(gameState.dices_state.length === 0) ? \"THROW DICES\" : \"REROLL\"}</Button>\n                                        :\n                                        <div></div>\n                                        }\n\t\t\t\t    {(nextMove(identity[1]) === gameState.move) ? <FastRewindIcon variant=\"contained\" ></FastRewindIcon>: <div></div>}\n                                    </div>\n                                </div>\n                                <div className='info'>\n                                    <h3 style={{ marginTop: '1vh' }}>You are player {identity[1]}</h3>\n                                    <h2 style={{ marginTop:'1vh' }}>move: player {gameState.move}</h2>\n                                    <h2 style={{color: 'orange', marginTop: '1vh'}}>rerolls left {3-gameState.rerolls}</h2>\n                                    \n                                </div>\n                            </div>\n                        </div>\n                            <div className='table'>\n                                {gameState.state.map(st => {\n                                    let id1 = uuidv4()\n                                    return (\n                                        <div key={id1} className='ptable'><BasicTable currentMove={gameState.move} gameid={identity[0]} playerid={identity[1]} tableid={st.player} dices={gameState.dices_state} points={st.points}/></div>\n                                    )\n                                })}\n                                \n                            </div>\n                    </div>: <Gamelobby state={gameState.state} chatState={chatState} sendMessage={sendMessage}  id={identity} connectedplayers={gameState.state.length}/> \n                    \n                    }   </div>\n            }\n    </div>\n    )\n}\nexport default Game;\n","/home/student/THE-DICES-GAME/app/src/ui/prime.js",["59","60","61","62","63","64"],"import Axios from 'axios'\nimport { TextField, Button } from '@material-ui/core';\nimport {useState, useEffect} from 'react'\n\nconst wzor = require('./jsonwzor')\nconst default_state = wzor.jsonik;\n\n\nfunction Prime({toggleGameStarted, setIdentity}) {\n    const [inputId, setInputId] = useState(\"\")\n    const [nick, setNick] = useState(\"\")\n    const [error, setError] = useState(\"\")\n\n\n    async function getGameId() {\n        try {\n          const response = await Axios({\n            method: \"post\",\n            url: \"/game\",\n            data: {activity: 1}\n          });\n    \n          setIdentity([response.data.gameid, 1])\n          toggleGameStarted(true)\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      async function joinGame(id) {\n        try {\n            const response = await Axios({\n            method: \"post\",\n            url: `/game`,\n            data: {activity: 3, id: id}\n          });\n          if (response.data.player >= 0) {\n            \n            setIdentity([id, response.data.player])\n            setTimeout(() =>toggleGameStarted(true), 1000)\n          } else {\n\n          }\n          \n          \n        } catch (error) {\n          console.error(error);\n        }\n      }\n    const onStartNewGame = () => {\n        getGameId()\n    }\n\n\n\n    return (\n        <div className='prime'>\n            <h1 className='title'>WELCOME TO THE GAME OF DICE</h1>\n            <div style={{display: 'flex', alignItems:'center', justifyContent:'center'}}>\n                <TextField  label=\"Input game ID\" variant=\"outlined\" onChange={(e) => setInputId(e.target.value)}></TextField>\n                <Button style={{marginLeft: '20px'}}variant=\"contained\" onClick={() => joinGame(inputId)} size=\"large\">JOIN</Button>\n            </div>\n            <h2>OR</h2>\n\n            <Button variant=\"contained\" color=\"secondary\" onClick={onStartNewGame}>START NEW GAME</Button>\n        </div>\n    )\n}\n\nexport default Prime;\n","/home/student/THE-DICES-GAME/app/src/ui/table.js",["65","66","67","68","69","70","71","72","73","74","75","76","77"],"import { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Axios from 'axios'\nimport {v4 as uuidv4} from 'uuid'\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 100\n  },\n});\n\nfunction createData(player, points) {\n  return { player, points};\n}\n\nfunction calculateDiceState (dices) {\n  let x = {\n    '1': 0,\n    '2': 0,\n    '3': 0,\n    '4': 0,\n    '5': 0,\n    '6': 0\n  }\n\n  dices.forEach(element => {\n    x[String(element.value)] +=1\n  });\n\n  return x\n}\n\nfunction calculateValue(name,value, dicesState) {\n  if (value == 0) {\n    let x = calculateDiceState(dicesState)\n      switch (name) {\n      case '1':\n          return x['1']\n\n      case '2':\n          return x['2']*2\n    \n      case '3':\n          return x['3']*3\n\n      case '4':\n          return x['4']*4\n\n      case '5':\n          return x['5']*5\n\n      case '6':\n          return x['6']*6\n\n      case '3x':\n          let val1 = 0\n          let iscor1 = false\n          for (let i in x) {\n              if (x[i] == 3) {\n                  val1 += 3*Number(i)\n                  iscor1 = true\n              } else {\n                  val1 += Number(i)*x[i]\n              }\n          }\n          if (iscor1) {\n              return val1\n          }\n          return 0\n\n      case '3+2x':\n        let is3 = false;\n        let is2 = false;\n        for (let i in x) {\n          if (x[i]===3) {\n            is3 = true\n          }\n          if (x[i] === 2) {\n            is2 = true;\n          }\n\n          \n        }\n        if (is3 && is2) return 25\n          else return 0\n\n      case '4x':\n          let val2 = 0\n          let iscor = false\n          for (let i in x) {\n              if (x[i] == 4) {\n                  val2 += 4*Number(i)\n                  iscor = true\n              } else {\n                  val2 += Number(i)*x[i]\n              }\n          }\n          if (iscor) {\n              return val2\n          }\n          return 0\n      \n      case 'small straight':\n          let ar = [];\n          dicesState.forEach(el => {\n              ar = [...ar, el.value]\n          });\n          ar.sort((a,b) => a-b);\n          let uniq1 = [...new Set(ar)];\n          if (uniq1.length >= 4) {\n              if (uniq1[0] == uniq1[1] - 1 && uniq1[1] == uniq1[2] - 1 && uniq1[2] == uniq1[3] - 1) {\n                  return 30\n              }\n\n          }\n          return 0\n          \n\n\n      case 'big straight':\n          let ar1 = [];\n          dicesState.forEach(el => {\n              ar1 = [...ar1, el.value]\n          });\n          ar1.sort((a,b) => a-b);\n          let uniq = [...new Set(ar1)];\n          if (uniq.length === 5) {\n            if (uniq[0] == uniq[1] - 1 && uniq[1] == uniq[2] - 1 && uniq[2] == uniq[3] - 1 && uniq[3] == uniq[4] - 1) {\n              return 40\n          }\n          } \n          return 0\n\n      case 'general':\n          for (let i in x) {\n              if (x[i] === 5) return 50\n          }\n          return 0\n      \n      case 'chance':\n          let p = 0\n          for (let i in x) {\n              p += x[i]*i;\n          }\n          return p\n          \n\n    }\n  } else {\n    return value\n  }\n}\n\n\nconst calculateSum = (points) => {\n  let sum = 0\n  points.forEach(el => {\n    sum += el.value\n  })\n  return sum\n}\n\nconst setToSet=(id) => {\n  document.getElementById(id).className = 'pointed'\n}\n\n\n\nexport default function BasicTable({currentMove,gameid,dices, points, playerid, tableid}) {\n  const classes = useStyles();\n\n  const findinpoints =  (name) => {\n    let x = points.find(p => p.name === name);\n    return x.chosen\n  }\n\n\n\n  const rowsgen = () =>{\n  if (currentMove===playerid && tableid===playerid) {\n    return [\n      createData('1', calculateValue('1', points[0].value, dices)),\n      createData('2', calculateValue('2', points[1].value, dices)),\n      createData('3', calculateValue('3',points[2].value, dices)),\n      createData('4', calculateValue('4', points[3].value, dices)),\n      createData('5', calculateValue('5', points[4].value, dices)),\n      createData('6', calculateValue('6', points[5].value, dices)),\n      createData('3x', calculateValue('3x', points[6].value, dices)),\n      createData('4x', calculateValue('4x', points[7].value, dices)),\n      createData('3+2x',calculateValue('3+2x', points[8].value, dices)),\n      createData('small straight', calculateValue('small straight', points[9].value, dices)),\n      createData('big straight', calculateValue('big straight', points[10].value, dices)),\n      createData('general', calculateValue('general', points[11].value, dices)),\n      createData('chance', calculateValue('chance', points[12].value, dices)),\n      createData('sum',calculateSum(points))\n    ];\n  }else {\n    return [\n      createData('1', (points[0].chosen) ? points[0].value: \"\" ),\n      createData('2',(points[1].chosen) ? points[1].value: \"\"  ),\n      createData('3', (points[2].chosen) ? points[2].value: \"\"  ),\n      createData('4',(points[3].chosen) ? points[3].value: \"\" ),\n      createData('5',(points[4].chosen) ? points[4].value: \"\"  ),\n      createData('6',(points[5].chosen) ? points[5].value: \"\" ),\n      createData('3x',(points[6].chosen) ? points[6].value: \"\"  ),\n      createData('4x',(points[7].chosen) ? points[7].value: \"\" ),\n      createData('3+2x',(points[8].chosen) ? points[8].value: \"\" ),\n      createData('small straight', (points[9].chosen) ? points[9].value: \"\"  ),\n      createData('big straight', (points[10].chosen) ? points[10].value: \"\"  ),\n      createData('general',(points[11].chosen) ? points[11].value: \"\" ),\n      createData('chance', (points[12].chosen) ? points[12].value: \"\" ),\n      createData('sum',calculateSum(points))\n    ];\n  }\n}\n  const rows = rowsgen();\n\n  async function sendChoice(name, point) {\n    console.log(currentMove, playerid, tableid)\n    if (currentMove === playerid && currentMove === tableid && name !== 'sum' && !findinpoints(name)) {\n      try {\n          const response = await Axios({\n          method: \"post\",\n          url: `/game`,\n          data: {\n            player: playerid,\n            name: name,\n            points: point,\n            activity: 5,\n            id: gameid\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n\n  return (\n    <TableContainer className='ptable'  component={Paper}>\n      <Table className={classes.table, 'ptable'} aria-label=\"simple table\" size='small'>\n        <TableHead>\n          <TableRow>\n            <TableCell>Player {tableid}</TableCell>\n            <TableCell onClick={()=> console.log('siema')} align=\"right\">points</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => {\n          \n          let rowid = uuidv4()\n          return (\n            <TableRow key={row.player} id={rowid}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.player}\n              </TableCell>\n              <TableCell \n              className={`${playerid === currentMove && row.player!=='sum' && tableid===playerid && !findinpoints(row.player) ? \"move\" : \"\"}`}\n              align=\"right\"\n              style={findinpoints(row.player)? {fontWeight:'bolder'} : {fontWeight: 'normal'}}\n              onClick={()=> {\n                sendChoice(row.player, row.points)\n                setToSet(rowid)\n              }}>{row.points}</TableCell> \n            </TableRow>\n          )})}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n}\n","/home/student/THE-DICES-GAME/app/src/ui/Chat.js",[],"/home/student/THE-DICES-GAME/app/src/ui/gamelobby.js",["78"],"import Axios from 'axios'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {Button, TextField} from '@material-ui/core'\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {useState} from 'react'\nimport Chat from './Chat'\n\n\nasync function start(id) {\n    try {\n        await Axios({\n        method: \"post\",\n        url: `/game`,\n        data: {activity: 2, id: id}\n        });\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nfunction Alert(props) {\nreturn <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\n\nexport default function Gamelobby({state,id, chatState, sendMessage, setMessage}) {\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n        copyToClipboard(id[0])\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false)\n    }\n    function copyToClipboard(text) {\n        var input = document.body.appendChild(document.createElement(\"input\"));\n        input.value = id[0];\n        input.focus();\n        input.select();\n        document.execCommand('copy');\n        input.parentNode.removeChild(input);\n    }\n    return (\n        <div>\n            <div className='gamelobby'>\n                <div>\n                <h1 className='title'>GAME LOBBY</h1>\n                <h3 className='title'>SEND GAME ID TO YOUR FRIEND</h3>\n                <Button onClick={handleClick} variant='contained'color='secondary'>Copy ID to clipboard</Button>\n                <Snackbar open={open} autoHideDuration={1000} onClose={handleClose} anchorOrigin={{ vertical:'top', horizontal:'center' }}>\n                    <Alert onClose={handleClose} severity=\"success\">\n                        ID COPIED!\n                    </Alert>\n                </Snackbar>\n                </div>\n                <Chat cl='lobbychat' state={state} chatState={chatState} sendMessage={sendMessage} identity={id[0]}/>\n                {id[1] === 1 ?<Button variant='contained'color='primary' onClick={() => start(id[0])}>START THE GAME</Button>\n                :\n                <div></div>\n}\n            </div>\n        </div>\n    )\n\n}","/home/student/THE-DICES-GAME/app/src/ui/jsonwzor.js",[],["79","80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":35},{"ruleId":"85","severity":1,"message":"89","line":1,"column":37,"nodeType":"87","messageId":"88","endLine":1,"endColumn":46},{"ruleId":"85","severity":1,"message":"90","line":10,"column":16,"nodeType":"87","messageId":"88","endLine":10,"endColumn":25},{"ruleId":"85","severity":1,"message":"91","line":18,"column":7,"nodeType":"87","messageId":"88","endLine":18,"endColumn":13},{"ruleId":"85","severity":1,"message":"92","line":19,"column":7,"nodeType":"87","messageId":"88","endLine":19,"endColumn":19},{"ruleId":"85","severity":1,"message":"93","line":28,"column":21,"nodeType":"87","messageId":"88","endLine":28,"endColumn":31},{"ruleId":"94","severity":1,"message":"95","line":48,"column":7,"nodeType":"96","endLine":48,"endColumn":9,"suggestions":"97"},{"ruleId":"85","severity":1,"message":"98","line":66,"column":20,"nodeType":"87","messageId":"88","endLine":66,"endColumn":47},{"ruleId":"85","severity":1,"message":"99","line":81,"column":11,"nodeType":"87","messageId":"88","endLine":81,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":116,"column":56,"nodeType":"87","messageId":"102","endLine":116,"endColumn":60},{"ruleId":"103","severity":1,"message":"104","line":161,"column":45,"nodeType":"105","endLine":161,"endColumn":243},{"ruleId":"106","severity":1,"message":"107","line":161,"column":89,"nodeType":"108","messageId":"109","endLine":161,"endColumn":91},{"ruleId":"85","severity":1,"message":"89","line":3,"column":19,"nodeType":"87","messageId":"88","endLine":3,"endColumn":28},{"ruleId":"85","severity":1,"message":"110","line":6,"column":7,"nodeType":"87","messageId":"88","endLine":6,"endColumn":20},{"ruleId":"85","severity":1,"message":"111","line":11,"column":12,"nodeType":"87","messageId":"88","endLine":11,"endColumn":16},{"ruleId":"85","severity":1,"message":"112","line":11,"column":18,"nodeType":"87","messageId":"88","endLine":11,"endColumn":25},{"ruleId":"85","severity":1,"message":"113","line":12,"column":12,"nodeType":"87","messageId":"88","endLine":12,"endColumn":17},{"ruleId":"85","severity":1,"message":"114","line":12,"column":19,"nodeType":"87","messageId":"88","endLine":12,"endColumn":27},{"ruleId":"106","severity":1,"message":"107","line":40,"column":13,"nodeType":"108","messageId":"109","endLine":40,"endColumn":15},{"ruleId":"115","severity":1,"message":"116","line":42,"column":7,"nodeType":"117","messageId":"118","endLine":154,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":65,"column":24,"nodeType":"108","messageId":"109","endLine":65,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":97,"column":24,"nodeType":"108","messageId":"109","endLine":97,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":117,"column":28,"nodeType":"108","messageId":"109","endLine":117,"endColumn":30},{"ruleId":"106","severity":1,"message":"107","line":117,"column":56,"nodeType":"108","messageId":"109","endLine":117,"endColumn":58},{"ruleId":"106","severity":1,"message":"107","line":117,"column":84,"nodeType":"108","messageId":"109","endLine":117,"endColumn":86},{"ruleId":"106","severity":1,"message":"107","line":134,"column":25,"nodeType":"108","messageId":"109","endLine":134,"endColumn":27},{"ruleId":"106","severity":1,"message":"107","line":134,"column":51,"nodeType":"108","messageId":"109","endLine":134,"endColumn":53},{"ruleId":"106","severity":1,"message":"107","line":134,"column":77,"nodeType":"108","messageId":"109","endLine":134,"endColumn":79},{"ruleId":"106","severity":1,"message":"107","line":134,"column":103,"nodeType":"108","messageId":"109","endLine":134,"endColumn":105},{"ruleId":"85","severity":1,"message":"119","line":228,"column":17,"nodeType":"87","messageId":"88","endLine":228,"endColumn":25},{"ruleId":"120","severity":1,"message":"121","line":247,"column":38,"nodeType":"122","messageId":"123","endLine":247,"endColumn":39},{"ruleId":"85","severity":1,"message":"90","line":3,"column":17,"nodeType":"87","messageId":"88","endLine":3,"endColumn":26},{"ruleId":"81","replacedBy":"124"},{"ruleId":"83","replacedBy":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'TextField' is defined but never used.","'jsonik' is assigned a value but never used.","'player_state' is assigned a value but never used.","'setClicked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'identity'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'send_game_state_when_chosen' is defined but never used.","'isMove' is assigned a value but never used.","no-self-assign","'mess' is assigned to itself.","selfAssignment","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'default_state' is assigned a value but never used.","'nick' is assigned a value but never used.","'setNick' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'response' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["126"],["127"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},"Update the dependencies array to be: [identity]",{"range":"131","text":"132"},[1760,1762],"[identity]"]